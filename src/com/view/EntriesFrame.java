/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.view.interfaces.IEntriesView;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALEX
 */
public class EntriesFrame extends AbstractChildFrame implements IEntriesView {

    @Override
    public void setDataTable(Vector<Vector<Object>> dataTable) {
        DefaultTableModel defTableModel = (DefaultTableModel) jtblEntries.getModel();
        clearTableModel(defTableModel);
        addTableModelData(defTableModel, dataTable);
    }

    @Override
    public void setCurentDate(Date date) {

        // set current date
        String title = "Запись пациентов на ";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        jlblTitle.setText(title + dateFormat.format(date));

        // set current time
//        DefaultTableModel defTableModel = (DefaultTableModel)jtblEntries.getModel();
//        addTableModelTime(defTableModel, date);
    }

    /**
     * Creates new form EntriesFrame
     */
    public EntriesFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setChildCloseOperation();
        setTableAlignments();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblTitle = new javax.swing.JLabel();
        jscrollEntries = new javax.swing.JScrollPane();
        jtblEntries = new javax.swing.JTable();
        jbtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Таблица записей на прием к врачу");
        setResizable(false);

        jlblTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitle.setText(" ");

        jtblEntries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Время приема", "Фамилия", "Имя", "Отчество", "Телефон", "E-mail", "Размер обуви", "Модель товара"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblEntries.setFillsViewportHeight(true);
        jtblEntries.setName(""); // NOI18N
        jtblEntries.setRowHeight(20);
        jscrollEntries.setViewportView(jtblEntries);

        jbtnClose.setText("<< Вернуться к выбору даты");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jscrollEntries, javax.swing.GroupLayout.DEFAULT_SIZE, 991, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnClose)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscrollEntries, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        presenter.showCalendar();
    }//GEN-LAST:event_jbtnCloseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnClose;
    private javax.swing.JLabel jlblTitle;
    private javax.swing.JScrollPane jscrollEntries;
    private javax.swing.JTable jtblEntries;
    // End of variables declaration//GEN-END:variables

    private void setTableAlignments() {
        DefaultTableCellRenderer centerRender = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value,
                    boolean isSelected,
                    boolean hasFocus,
                    int row,
                    int column) {
                super.setHorizontalAlignment(SwingConstants.CENTER);
                super.getTableCellRendererComponent(table,
                        value,
                        isSelected,
                        hasFocus,
                        row,
                        column);
                return this;
            }
        };

        jtblEntries.getColumnModel().getColumn(0).setCellRenderer(centerRender);
        jtblEntries.getColumnModel().getColumn(6).setCellRenderer(centerRender);
    }

    private void clearTableModel(DefaultTableModel model) {
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    private void addTableModelData(DefaultTableModel model,
            Vector<Vector<Object>> dataTable) {
        for (Vector<Object> row : dataTable) {
            model.addRow(row);
        }
    }

//    private void addTableModelTime(DefaultTableModel model,
//                                   Date date) {
//        Calendar calendar = new GregorianCalendar();
//        calendar.setTime(date);
//        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
//
//        try {
//            // create time and format
//            SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
//            Date timeForRows;
//
//            if (dayOfWeek == Calendar.SATURDAY) {
//                // set start time on 13:00
//                timeForRows = timeFormat.parse("13:00");
//            } else {
//                // set start time on 16:00
//                timeForRows = timeFormat.parse("16:00");
//            }
//
//            // insert time in each row and increments by 30 minutes
//            for (int i = 0; i < model.getRowCount(); ++i) {
//                model.setValueAt(timeFormat.format(timeForRows), i, 0);
//
//                long t = timeForRows.getTime();
//                timeForRows = new Date(t + (30 * ONE_MINUTE_IN_MILLISECS));
//            }
//        } catch (ParseException ex) {
//                Logger.getLogger(MainPresenter.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
}
